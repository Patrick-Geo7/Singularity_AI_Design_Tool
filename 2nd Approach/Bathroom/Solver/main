import argparse
import pandas as pd
from bathroom_solver import BathroomSolver
from constraints import BathroomConstraints

def test_simple_case():
    """Run solver with a simple test case to verify core functionality."""
    print("\nRunning simple test case...")
    # Simple square room with door on bottom wall
    solver = BathroomSolver(
        room_width=100,
        room_length=100,
        door_x=35,
        door_y=0,
        door_width=30,
        has_toilet=True,
        has_sink=True,
        has_bathtub=False
    )

    try:
        print("\nAttempting to solve layout...")
        solution = solver.solve()
        print("\nTest case solution found!")
        print("\nFixture positions:")
        for fixture, pos in solution.items():
            print(f"\n{fixture.capitalize()}: ({pos['x']}, {pos['y']}) inches")

        print("\nGenerating visualization...")
        solver.visualizer.render(solution)
        print("Visualization has been saved to 'bathroom_layout_test.png'")
        return True
    except Exception as e:
        print(f"\nTest case failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    parser = argparse.ArgumentParser(description='Bathroom Fixture Placement Solver')
    parser.add_argument('--csv', type=str, default='attached_assets/X_train.csv',
                        help='Path to input CSV file (default: X_train.csv)')
    parser.add_argument('--index', type=int,
                        help='Specific room index to solve (optional)')
    parser.add_argument('--test', action='store_true',
                        help='Run simple test case instead of CSV data')
    args = parser.parse_args()

    if args.test:
        if not test_simple_case():
            print("\nSimple test case failed. Please fix core functionality before processing real data.")
            return

    try:
        print(f"\nLoading data from {args.csv}")
        df = pd.read_csv(args.csv)
        if args.index is not None:
            if args.index >= len(df):
                raise ValueError(f"Invalid index {args.index}. File contains {len(df)} rooms.")
            df = df.iloc[args.index:args.index+1]

        solved_count = 0
        print(f"\nProcessing {len(df)} room(s)...")

        for index, row in df.iterrows():
            print(f"\nSolving room {index}")
            solver = BathroomSolver(
                room_width=row['Room_Width'],
                room_length=row['Room_Length'],
                door_x=row['Door_X_Position'],
                door_y=row['Door_Y_Position'],
                door_width=row['Door_Width'],
                has_toilet=bool(row['Has_Toilet']),
                has_sink=bool(row['Has_Sink']),
                has_bathtub=bool(row['Has_Bathtub'])
            )
            try:
                solution = solver.solve()
                print(f"\nSolution found for room {index}:")
                for fixture, pos in solution.items():
                    print(f"\n{fixture.capitalize()}: ({pos['x']}, {pos['y']}) inches")
                solver.visualizer.render(solution, index)
                print(f"Visualization saved to 'bathroom_layout_{index}.png'")
                solved_count += 1
            except ValueError as e:
                print(f"\nCould not solve room {index}: {str(e)}")
            except Exception as e:
                print(f"\nError processing room {index}: {str(e)}")
                import traceback
                traceback.print_exc()

        print(f"\nProcessing complete. Solved {solved_count} out of {len(df)} rooms.")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
